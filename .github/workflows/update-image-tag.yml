name: Update Container Image Tag

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: "Container image name (without tag)"
        required: true
        type: string
      new_tag:
        description: "New image tag to update to"
        required: true
        type: string
  repository_dispatch:
    types: [update-image-tag]

jobs:
  update-image-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install ruamel.yaml
        run: pip install ruamel.yaml

      - name: Update image tag in YAML files
        id: update-files
        run: |
          python3 << 'EOF'
          from ruamel.yaml import YAML
          import os
          import re
          from pathlib import Path

          # Handle inputs from both workflow_dispatch and repository_dispatch
          image_name = "${{ github.event.inputs.image_name || github.event.client_payload.image_name }}"
          new_tag = "${{ github.event.inputs.new_tag || github.event.client_payload.new_tag }}"

          print(f"Looking for image: {image_name}")
          print(f"New tag: {new_tag}")

          updated_files = []

          # Find all YAML files in the repository
          yaml_files = list(Path('.').glob('*.yaml')) + list(Path('.').glob('*.yml'))

          for yaml_file in yaml_files:
              try:
                  yaml = YAML()
                  yaml.preserve_quotes = True
                  yaml.width = 4096

                  with open(yaml_file, 'r') as f:
                      data = yaml.load(f)

                  # Check if this file has containerizedConfig.image
                  if (isinstance(data, dict) and
                      'containerizedConfig' in data and
                      isinstance(data['containerizedConfig'], dict) and
                      'image' in data['containerizedConfig']):

                      current_image = data['containerizedConfig']['image']
                      print(f"Found image in {yaml_file}: {current_image}")

                      # Check if the image name matches (with or without registry prefix)
                      if image_name in current_image:
                          # Extract the current image name without tag
                          if ':' in current_image:
                              image_base = current_image.rsplit(':', 1)[0]
                          else:
                              image_base = current_image

                          # Create new image with new tag
                          new_image = f"{image_base}:{new_tag}"

                          print(f"Updating {yaml_file}: {current_image} -> {new_image}")

                          # Update the image in the YAML data
                          data['containerizedConfig']['image'] = new_image

                          # Write back to file, preserving formatting as much as possible
                          with open(yaml_file, 'w') as f:
                              yaml.dump(data, f)

                          updated_files.append(str(yaml_file))

              except Exception as e:
                  print(f"Error processing {yaml_file}: {e}")
                  continue

          if updated_files:
              print(f"Updated files: {', '.join(updated_files)}")
              print(f"::set-output name=updated_files::{','.join(updated_files)}")
              print(f"::set-output name=files_updated::true")
          else:
              print("No matching files found to update")
              print(f"::set-output name=files_updated::false")
          EOF

      - name: Create Pull Request
        if: steps.update-files.outputs.files_updated == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update ${{ github.event.inputs.image_name || github.event.client_payload.image_name }} to tag ${{ github.event.inputs.new_tag || github.event.client_payload.new_tag }}"
          title: "Update ${{ github.event.inputs.image_name || github.event.client_payload.image_name }} to tag ${{ github.event.inputs.new_tag || github.event.client_payload.new_tag }}"
          reviewers: tybalex
          body: |
            This PR updates the container image tag for `${{ github.event.inputs.image_name || github.event.client_payload.image_name }}` to `${{ github.event.inputs.new_tag || github.event.client_payload.new_tag }}`.

            **Updated files:**
            ${{ steps.update-files.outputs.updated_files }}

            **Changes:**
            - Updated `containerizedConfig.image` field with new tag

            Auto-generated by the update-image-tag workflow.
          branch: update-image-${{ github.event.inputs.image_name || github.event.client_payload.image_name }}-${{ github.event.inputs.new_tag || github.event.client_payload.new_tag }}
          delete-branch: true

      - name: Output results
        run: |
          if [ "${{ steps.update-files.outputs.files_updated }}" == "true" ]; then
            echo "✅ Successfully updated image tag in the following files:"
            echo "${{ steps.update-files.outputs.updated_files }}" | tr ',' '\n'
          else
            echo "❌ No files were updated. Please check:"
            echo "1. The image name '${{ github.event.inputs.image_name || github.event.client_payload.image_name }}' exists in any YAML file"
            echo "2. The YAML file has a containerizedConfig.image field"
            exit 1
          fi
