name: Neon Database
description: |
  <picture>
    <source media="(prefers-color-scheme: dark)" srcset="https://neon.com/brand/neon-logo-dark-color.svg">
    <source media="(prefers-color-scheme: light)" srcset="https://neon.com/brand/neon-logo-light-color.svg">
    <img width="250px" alt="Neon Logo fallback" src="https://neon.com/brand/neon-logo-dark-color.svg">
  </picture>

  [![npm version](https://img.shields.io/npm/v/@neondatabase/mcp-server-neon)](https://www.npmjs.com/package/@neondatabase/mcp-server-neon)
  [![npm downloads](https://img.shields.io/npm/dt/@neondatabase/mcp-server-neon)](https://www.npmjs.com/package/@neondatabase/mcp-server-neon)
  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

  A Model Context Protocol (MCP) server that lets you interact with your Neon Postgres databases using natural language. Built on the Model Context Protocol, it acts as a bridge between natural language requests and the Neon API, enabling seamless database management without complex SQL or direct API calls.

  ## Features
  - **Natural Language Interaction**: Manage Neon databases using intuitive, conversational commands
  - **Project & Branch Management**: Create, delete, and manage Neon projects and branches with branching capabilities
  - **SQL Query Execution**: Run single queries or transactions with performance analysis and optimization
  - **Database Migrations**: Safe schema changes with temporary branch testing and rollback capabilities
  - **Performance Optimization**: Query tuning, execution plans, and slow query identification
  - **Accessibility**: Empowers users with varying technical backgrounds to interact with databases

  ## What you'll need to connect

  **Required:**
  - **Neon Account**: Active Neon account (sign up at [console.neon.tech](https://console.neon.tech/signup))

  ## Example Usage

  - "Let's create a new Postgres database, and call it 'my-database'. Let's then create a table called users with columns: id, name, email, and password."
  - "I want to run a migration on my project 'my-project' that alters the users table to add a 'created_at' column."
  - "Can you give me a summary of all of my Neon projects and what data is in each one?"

metadata:
  categories: Databases
icon: https://avatars.githubusercontent.com/u/183852044?v=4
repoURL: https://github.com/neondatabase/mcp-server-neon
runtime: remote
remoteConfig:
  fixedURL: https://mcp.neon.tech/mcp

toolPreview:
  - name: list_projects
    description: Lists the first 10 Neon projects in your account. If you can't find the project, increase the limit by passing a higher value to the limit parameter.
    params:
      cursor: Optional cursor for pagination
      limit: Maximum number of projects to return (default 10)
      org_id: Optional organization ID to filter projects
      search: Optional search string to filter projects
  - name: create_project
    description: Create a new Neon project. If someone is trying to create a database, use this tool.
    params:
      name: Name for the new project
      org_id: Optional organization ID
  - name: delete_project
    description: Delete a Neon project
    params:
      projectId: ID of the project to delete
  - name: describe_project
    description: Describes a Neon project
    params:
      projectId: ID of the project to describe
  - name: run_sql
    description: Execute a single SQL statement against a Neon database. If you have a temporary branch from a prior step, you MUST pass the branch ID to this tool unless explicitly told otherwise.
    params:
      branchId: Branch ID to execute SQL on
      databaseName: Name of the database
      projectId: Project ID
      sql: SQL statement to execute
  - name: run_sql_transaction
    description: Execute a SQL transaction against a Neon database, should be used for multiple SQL statements. If you have a temporary branch from a prior step, you MUST pass the branch ID to this tool.
    params:
      branchId: Branch ID to execute transaction on
      databaseName: Name of the database
      projectId: Project ID
      sqlStatements: Array of SQL statements to execute in transaction
  - name: describe_table_schema
    description: Describe the schema of a table in a Neon database
    params:
      branchId: Branch ID
      databaseName: Name of the database
      projectId: Project ID
      tableName: Name of the table to describe
  - name: get_database_tables
    description: Get all tables in a Neon database
    params:
      branchId: Branch ID
      databaseName: Name of the database
      projectId: Project ID
  - name: create_branch
    description: Create a branch in a Neon project
    params:
      branchName: Name for the new branch
      projectId: Project ID
  - name: prepare_database_migration
    description: Performs database schema migrations by automatically generating and executing DDL statements. Creates a temporary branch, applies migration SQL, and returns migration details for verification.
    params:
      databaseName: Name of the database
      migrationSql: Migration SQL to execute
      projectId: Project ID
  - name: complete_database_migration
    description: Complete a database migration when the user confirms the migration is ready to be applied to the main branch. Also deletes the temporary branch created by prepare_database_migration.
    params:
      migrationId: Migration ID from prepare_database_migration
  - name: describe_branch
    description: Get a tree view of all objects in a branch, including databases, schemas, tables, views, and functions
    params:
      branchId: Branch ID to describe
      databaseName: Name of the database
      projectId: Project ID
  - name: delete_branch
    description: Delete a branch from a Neon project
    params:
      branchId: Branch ID to delete
      projectId: Project ID
  - name: get_connection_string
    description: Get a PostgreSQL connection string for a Neon database with all parameters being optional
    params:
      branchId: Optional branch ID
      computeId: Optional compute ID
      databaseName: Optional database name
      projectId: Optional project ID
      roleName: Optional role name
  - name: provision_neon_auth
    description: Provisions authentication for a Neon project by creating an integration with Stack Auth. Sets up authentication infrastructure including user tables and credentials.
    params:
      database: Optional database name (default neondb or first available)
      projectId: Project ID to provision authentication for
  - name: explain_sql_statement
    description: Describe the PostgreSQL query execution plan for a SQL statement by running EXPLAIN (ANALYZE...) in the database
    params:
      analyze: Whether to include ANALYZE in the explain
      branchId: Branch ID
      databaseName: Name of the database
      projectId: Project ID
      sql: SQL statement to explain
  - name: prepare_query_tuning
    description: Helps improve PostgreSQL query performance by analyzing execution plans and suggesting optimizations. Creates a temporary branch for testing and provides tuning recommendations.
    params:
      databaseName: Name of the database
      projectId: Project ID
      roleName: Role name for connection
      sql: SQL query to optimize
  - name: complete_query_tuning
    description: Complete a query tuning session by either applying the changes to the main branch or discarding them. Must be called after prepare_query_tuning for proper cleanup.
    params:
      applyChanges: Whether to apply the suggested changes
      branchId: Main branch ID to apply changes to
      databaseName: Name of the database
      projectId: Project ID
      roleName: Role name for connection
      shouldDeleteTemporaryBranch: Whether to delete the temporary branch
      suggestedSqlStatements: Array of suggested SQL statements
      temporaryBranchId: Temporary branch ID from prepare_query_tuning
      tuningId: Tuning ID from prepare_query_tuning
  - name: list_slow_queries
    description: List slow queries from your Neon database using the pg_stat_statements extension. Returns queries sorted by execution time with slowest queries first.
    params:
      branchId: Branch ID
      computeId: Compute ID
      databaseName: Name of the database
      limit: Maximum number of queries to return
      minExecutionTime: Minimum execution time threshold
      projectId: Project ID
  - name: list_branch_computes
    description: Lists compute endpoints for a project or specific branch
    params:
      branchId: Branch ID
      projectId: Project ID
  - name: list_organizations
    description: Lists all organizations that the current user has access to. Optionally filter by organization name or ID using the search parameter.
    params:
      search: Optional search string to filter organizations
